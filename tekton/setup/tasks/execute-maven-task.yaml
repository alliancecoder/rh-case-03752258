apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: execute-maven-task
spec:
  description: This Task can be used to run a Maven build.
  params:
  # failing gcr image gcr.io/cloud-builders/mvn@sha256:642febb52d80a95de983dd7e2ff584a3e365e1d2a7fad795816b3acc204d641c
  # updated gcr 2024-06-03 gcr.io/cloud-builders/mvn@sha256:15713b058037904eced9bc143dd145267d9bff5c1583aca685fcdb764fba5fb0
  # failing Red Hat image registry.redhat.io/ubi8/openjdk-17@sha256:0d12c4097e098b62f78a7a31c0d711d78e1e5a53f4c007b9a5fc6cc6ab4dc018
  # updated ubi8 RH image registry.access.redhat.com/ubi8/openjdk-17@sha256:e8cc2e476282b75d89c73057bfa713db22d72bdb2808d62d981a84c33beb2575
  # updated ubi9 RH image registry.access.redhat.com/ubi9/openjdk-17@sha256:144419dd1caf7c4455418d2dbf99c1c02a07e9c207e9c66e0224b852633ea2fe
    - default: >-
        registry.redhat.io/ubi8/openjdk-17@sha256:a8165bc2cd5051a96d6937e25ed03155bbd4b731da6e58cebfe2ea83209c16d8
      description: Maven base image
      name: MAVEN_IMAGE
      type: string
    - default:
      - package
      description: maven goals to run
      name: GOALS
      type: array
    - default: ''
      description: The Maven repository mirror url
      name: MAVEN_MIRROR_URL
      type: string
    - default: ''
      description: The username for the server
      name: SERVER_USER
      type: string
    - default: ''
      description: The password for the server
      name: SERVER_PASSWORD
      type: string
    - default: ''
      description: The username for the proxy server
      name: PROXY_USER
      type: string
    - default: ''
      description: The password for the proxy server
      name: PROXY_PASSWORD
      type: string
    - default: ''
      description: Port number for the proxy server
      name: PROXY_PORT
      type: string
    - default: ''
      description: Proxy server Host
      name: PROXY_HOST
      type: string
    - default: ''
      description: Non proxy server host
      name: PROXY_NON_PROXY_HOSTS
      type: string
    - default: http
      description: Protocol for the proxy ie http or https
      name: PROXY_PROTOCOL
      type: string
    - default: .
      description: >-
        The context directory within the repository for sources on which we want
        to execute maven goals.
      name: CONTEXT_DIR
      type: string
  sidecars:
    - args:
        - '--storage-driver=vfs'
        - '--userland-proxy=false'
        - '--debug'
      env:
        - name: DOCKER_TLS_CERTDIR
          value: /certs
      image: 'docker:dind'
      name: server
      readinessProbe:
        exec:
          command:
            - ls
            - /certs/client/ca.pem
        periodSeconds: 1
      computeResources:
        requests:
          memory: 512Mi
      securityContext:
        privileged: true
      volumeMounts:
        - mountPath: /certs/client
          name: dind-certs
        - mountPath: /var/run/
          name: dind-socket
        - mountPath: /var/lib/docker
          name: dind-storage
  steps:
    - image: 'registry.redhat.io/ubi8/ubi-minimal@sha256:6825946f10e8c81586fa7815c4f06016af05cfc231d921ec9699402a6655d201'
      name: mvn-settings
      computeResources: {}
      script: >
        #!/usr/bin/env bash

        [[ -f $(workspaces.maven-settings.path)/settings.xml ]] && \

        echo 'using existing $(workspaces.maven-settings.path)/settings.xml' &&
        exit 0


        cat > $(workspaces.maven-settings.path)/settings.xml <<EOF

        <settings>
          <servers>
            <!-- The servers added here are generated from environment variables. Don't change. -->
            <!-- ### SERVER's USER INFO from ENV ### -->
          </servers>
          <mirrors>
            <!-- The mirrors added here are generated from environment variables. Don't change. -->
            <!-- ### mirrors from ENV ### -->
          </mirrors>
          <proxies>
            <!-- The proxies added here are generated from environment variables. Don't change. -->
            <!-- ### HTTP proxy from ENV ### -->
          </proxies>
        </settings>

        EOF


        xml=""

        if [ -n "$(params.PROXY_HOST)" -a -n "$(params.PROXY_PORT)" ]; then
          xml="<proxy>\
            <id>genproxy</id>\
            <active>true</active>\
            <protocol>$(params.PROXY_PROTOCOL)</protocol>\
            <host>$(params.PROXY_HOST)</host>\
            <port>$(params.PROXY_PORT)</port>"
          if [ -n "$(params.PROXY_USER)" -a -n "$(params.PROXY_PASSWORD)" ]; then
            xml="$xml\
                <username>$(params.PROXY_USER)</username>\
                <password>$(params.PROXY_PASSWORD)</password>"
          fi
          if [ -n "$(params.PROXY_NON_PROXY_HOSTS)" ]; then
            xml="$xml\
                <nonProxyHosts>$(params.PROXY_NON_PROXY_HOSTS)</nonProxyHosts>"
          fi
          xml="$xml\
              </proxy>"
          sed -i "s|<!-- ### HTTP proxy from ENV ### -->|$xml|" $(workspaces.maven-settings.path)/settings.xml
        fi


        if [ -n "$(params.SERVER_USER)" -a -n "$(params.SERVER_PASSWORD)" ];
        then
          xml="<server>\
            <id>serverid</id>"
          xml="$xml\
                <username>$(params.SERVER_USER)</username>\
                <password>$(params.SERVER_PASSWORD)</password>"
          xml="$xml\
              </server>"
          sed -i "s|<!-- ### SERVER's USER INFO from ENV ### -->|$xml|" $(workspaces.maven-settings.path)/settings.xml
        fi


        if [ -n "$(params.MAVEN_MIRROR_URL)" ]; then
          xml="    <mirror>\
            <id>mirror.default</id>\
            <url>$(params.MAVEN_MIRROR_URL)</url>\
            <mirrorOf>central</mirrorOf>\
          </mirror>"
          sed -i "s|<!-- ### mirrors from ENV ### -->|$xml|" $(workspaces.maven-settings.path)/settings.xml
        fi

      securityContext:
        privileged: false
        # From my test environment, this container was able to find the `settings.xml` file without issue,
        # so there was no need to apply this modification:
        # runAsUser: 1001
    - args:
        - '-s'
        - $(workspaces.maven-settings.path)/settings.xml
        - $(params.GOALS)
      command:
          - /usr/bin/mvn
      image: $(params.MAVEN_IMAGE)
      name: mvn-goals
      computeResources: {}
      securityContext:
        privileged: false
        # This was the only truly required change I found to have my test environment's pipeline to run correctly
        runAsUser: 1001
      volumeMounts:
        - mountPath: /certs/client
          name: dind-certs
        - mountPath: /var/run/
          name: dind-socket
      workingDir: $(workspaces.source.path)/$(params.CONTEXT_DIR)
  volumes:
    - emptyDir: {}
      name: dind-storage
    - emptyDir: {}
      name: dind-socket
    - emptyDir: {}
      name: dind-certs
  workspaces:
    - name: source
      description: The workspace consisting of maven project.
    - name: maven-settings
      description: >-
        The workspace consisting of the custom maven settings provided by the
        user.
